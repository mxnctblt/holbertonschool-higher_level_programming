Using class ``MyList``
-----------------------

Class MyList can store a list
Has a function print_sorted to print the list in MyList sorted

First import class ``MyList``

    >>> MyList = __import__('1-my_list').MyList

Now use it:

    	>>> type(MyList())
	<class '1-my_list.MyList'>

	>>> issubclass(MyList, list)
	True

	>>> my_list = MyList(None)
	Traceback (most recent call last):
	TypeError: 'NoneType' object is not iterable

	>>> my_list = MyList()
	>>> my_list.append(-1)
	>>> my_list.append(4)
	>>> my_list.append(3)
	>>> my_list.append(0)
	>>> my_list.print_sorted()
	[-1, 0, 3, 4]

	>>> my_list = MyList()
	>>> my_list.append(-1)
	>>> my_list.append(-4)
	>>> my_list += [-8]
	>>> my_list.append(-5)
	>>> my_list.print_sorted()
	[-8, -5, -4, -1]

	>>> my_list = MyList()
	>>> my_list.print_sorted()
	[]

	>>> my_list.print_sorted(1)
	Traceback (most recent call last):
	TypeError: print_sorted() takes 1 positional argument but 2 were given

	>>> my_list.print_sorted(1, 2)
	Traceback (most recent call last):
	TypeError: print_sorted() takes 1 positional argument but 3 were given

	>>> my_list = MyList()
	>>> my_list.append('a')
	>>> my_list.append('e')
	>>> my_list.append('c')
	>>> my_list.append('b')
	>>> my_list.append('d')
	>>> my_list.print_sorted()
	['a', 'b', 'c', 'd', 'e']

	>>> my_list = MyList()
	>>> my_list.append(0)
	>>> my_list.append(0)
	>>> my_list.append(0)
	>>> my_list.append(0)
	>>> my_list.print_sorted()
	[0, 0, 0, 0]

	>>> my_list = MyList()
	>>> my_list.append(0)
	>>> my_list.append(70)
	>>> my_list.append(4)
	>>> my_list.append(333)
	>>> my_list.print_sorted()
	[0, 4, 70, 333]
